// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy_Project.Data;

#nullable disable

namespace Pharmacy_Project.Migrations
{
    [DbContext(typeof(Pharmacy_DbContext))]
    [Migration("20230118124104_tabels")]
    partial class tabels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.AnalysisLaps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Lap_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lap_rate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("AnalysisLaps");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Areas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Area_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitiesId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cite_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealOfficer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstWife")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthWife")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrandMotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecendWife")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThirdWife")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Clincs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Clin_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clin_rate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("CityId");

                    b.HasIndex("City_Id");

                    b.ToTable("Clincs");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Complains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Deails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Complains");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insta_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Hospitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Hospt_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospt_rate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.MedicalCentres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<string>("Centers_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Centers_rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("MedicalCentres");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Pharmacies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Pharm_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharm_rate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Terms_Conditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Terms_Conditions");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Xrays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area_Id")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Xray_Descriprion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_FacebookLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_InstaLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_LInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_LocationLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_NameImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_WhatsappLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_YoutubeLInk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xray_rate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Xrays");
                });

            modelBuilder.Entity("Pharmacy_Project.Extend.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pharmacy_Project.Extend.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pharmacy_Project.Extend.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Extend.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pharmacy_Project.Extend.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.AnalysisLaps", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany("AnalysisLaps")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("AnalysisLaps")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Areas", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", null)
                        .WithMany("Areas")
                        .HasForeignKey("CitiesId");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Clincs", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany()
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", null)
                        .WithMany("Clincs")
                        .HasForeignKey("CityId");

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("Clincs")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Hospitals", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany("Hospitals")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("Hospitals")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.MedicalCentres", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany("MedicalCentres")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("MedicalCentres")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Pharmacies", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany("Pharmacies")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("Pharmacies")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Xrays", b =>
                {
                    b.HasOne("Pharmacy_Project.Data.Entities.Areas", "Areas")
                        .WithMany("Xrays")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_Project.Data.Entities.Cities", "Cities")
                        .WithMany("Xrays")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Areas", b =>
                {
                    b.Navigation("AnalysisLaps");

                    b.Navigation("Clincs");

                    b.Navigation("Hospitals");

                    b.Navigation("MedicalCentres");

                    b.Navigation("Pharmacies");

                    b.Navigation("Xrays");
                });

            modelBuilder.Entity("Pharmacy_Project.Data.Entities.Cities", b =>
                {
                    b.Navigation("AnalysisLaps");

                    b.Navigation("Areas");

                    b.Navigation("Clincs");

                    b.Navigation("Hospitals");

                    b.Navigation("MedicalCentres");

                    b.Navigation("Pharmacies");

                    b.Navigation("Xrays");
                });
#pragma warning restore 612, 618
        }
    }
}
